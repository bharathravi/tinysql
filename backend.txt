A short description of the structure of tinySQL

1. Structure
----------------------
A tinySQL implementation can be roughly divided into four parts:

  a) the JDBC-frontend
  b) the parser
  c) the compiled statements
  d) the database 


1.a The JDBC-Frontend:
----------------------  
A user of a tinySQL-driver will work with tinySQL using the abstract
java.sql.* package, which is implemented by the JDBC-Frontend classes.
These classes include:

Package ORG.as220.tinySQL:
  tinySQLConnection
  tinySQLDriver
  tinySQLPreparedStatement
  tinySQLResultSet
  tinySQLResultSetMetaData
  tinySQLStatement
  tinySQLDatabaseMetaData
  
Most users will not care about what classes actualy implement the JDBC-
functionality. A developer should not implement database specific details
into the base methods, instead he should extend the classes to override
the default behaviour with own implementations.

1.b The parser
-----------------------
The parser is created by JavaCC using the file 
src/ORG/as220/tinySQL/parser/tinySQL.jj as input to JavaCC. All files
in the package "ORG.as220.tinySQL.parser" are generated by JavaCC and should
not be edited directly.

For details on the SQL-language syntax the parser understands see the
file parser.txt.

The parser is non-static and not synchronized. Using the method 

    TinySQLParser.getStatement (tinySQLStatement parent) 
    
starts the parsing 
process. Parsing is usually done in 

    tinySQL.parse (tinySQLStatement stmt, String sql)
    
and returns a compiled statement object which is completly initialized and
can be executed using 
  
    SQLStatement.execute ()

If the statement is parameterized, the parameters can be retrieved using

    SQLStatement.getParameters ()

which returns a ordered vector of ParameterValues ordered by occurence of
the parameters in the original statement string.

1.c The compiled statements
---------------------------
1.c.1 Statement description
---------------------------
The parser creates a instance of SQLStatement. Every statement knows how
to execute itself, usually by calling the appropriate command function in
tinySQL. 

  Example: SelectStatement executes itself by calling 
           tinySQL.SelectStatement (SelectStatement stmt)
           
Details of the implementation of a sql-command is hidden in the specific
SQLStatement implementation of the command, and neither the tinySQLStatement
nor any other user of the statement need to know how and where to execute
the statement. 

Every SQLStatement implements the needed execution methods of 
java.sql.Statement preserving the semantics of the methods:

  boolean execute()
  boolean getMoreResults ()
  int getUpdateCount ()
  (ts)ResultSet getResultSet

execute() returns either true or false on success. If it returns true, a
ResultSet is available and can be retrieved by getResultSet(). If execute()
returns false, a update count is available and can be retrieved by 
getUpdateCount(). A SQLStatement is able to return multiple results on
a query (even when this feature is not yet used by any statement) and the
returnvalue of getMoreResults() has the same semantic as the returnvalue
of execute().

1.c.2 LValues and expressions
-----------------------------
SQL-Strings may contain assignable values (LValues). LValues can be expressions
such as "(a + b)" or references to data columns, or static values as "5" or
"null" or "true". 

All assignable value implementations have to implement
the LValue interface. Currently there are 4 known implementations of LValues.

The ColumnValue references to a table column in the query.

The Expression is a compound LValue combining values and operators into
terms.

A JokerColumnValue is created by the parser when a "*" or "tablename.*"
value is encountered. JokerColumnValues cannot be evaluated, they are expanded
and replaced by all columns of the specified table(s).

A ParameterValue is used to mark a parameter entry for PreparedStatements.
All ParameterValues have to be set or execution will fail.

There is a function interface in the package, but it is neither implemented
nor is there support in the parser for functions.

1.c.3 Where Clauses
------------------
Statements that are able to contain a where-clause implement the interface
ConditionalStatement. Currently SELECT, UPDATE and DELETE support where-clauses.

A Whereclause contains a single expression, which evaluates to a boolean value.
If the expression does not evaluate to a boolean, false is returned for any
row.

You may check whether a whereclause matches a given row using the
WhereClause.isMatch (tsRow) method.

1.d The database
------------------
The database forms the interface to the native implementation of the specific
tinySQL-drivers.

The database portion of tinySQL contains the following abstract classes

  tinySQLTable
  tinySQL
  tsRawRow
  
Optionaly one may extend the following classes

  tinySQLDatabaseMetaData
  tinySQLConverter

The following classes are needed to boot the database. Driver is used to
create a connection and connection should create the native tinySQL-object.

  tinySQLConnection
  tinySQLDriver

The tinySQL way of managing tables
----------------------------------
Every table is managed by the tinySQL object. This object is used to create
new tables and table views and to close open tables. tinySQL does also contain
the table managing commands ALTER TABLE, DROP TABLE, CREATE TABLE and
COMPACT TABLE. For explainations of the commands see parser.txt

A table for data manipulation is opened by using the getTable(name) method
of tinySQL. tinySQL will open the physical table if not already done and 
creates a table view for the physical table. All table views are registered
on the physical table. If the physical table is closed, all assigned table
view are also closed.

TableViews implement some sort of cursor to the the physical table. Multiple
tableViews may access a table concurrently, every view with its own notion
of the current cursorposition.

When changing the structure of the database, all assigned table views are 
closed and tinySQL gains exclusive access to the table. The operation will
create a altered copy of the table and starts working. If the copy is filled
and the command is executed successfully, the original table is replaced
by the copy. This guarantees a relative high level of datasecurity when
operating on filled tables.


UpdateRow and InsertRow
--------------------------------
PhysicalTables use getInsertRow to create a empty row to the user, which
may be filled and later be inserted into the physical file. The insertRow
should be initialized with defaultValues if the database supports defaults.

UpdateRow is a filled row, usually aquired using get, which is returned
to the user to be altered and later be rewritten into the physical structure.


DataConversion from and into the database
-----------------------------------------
Physical tables do always read and write complete rows. If you want to
manipulate columns in a row, use a table view to do the task for you.

All physical tables work with a own tsRawRow implementation which is used
to copy data from and into the row. The tsRawRow provides 2 methods for 
implementing native access.

tsRawRow.nativePut is used to convert a JDBC-Value into a native value.
tsRawRow.nativeGet is used to convert a native value into a JDBC-Value.


tinySQLConverter
-----------------------------------------
A converter is a collection of methods to convert between native and JDBC
values. Every table has its own converter and one should not assume that
converters are replaceable between tables. 

When implementing a new driver for tinySQL you should not need the converter
except when implementing the assigned tsRawRow for the native tables.

tinySQLConverter should not be used outside of tsRawRow to enforce a clean
design of the driver and its classes.




2. tsResultSet and tsResultRow
-----------------------------------------
A tsResultRow is used to evaluate expressions in a statement and context free
environment. tsResultRow evaluates expressions whenever the get() method
is called for a Expression column. After the expression is evaluated its 
evaluation result is stored for performance reasons. 

Every tsResultRow has a parentrow from which to get table column values.
Values that are not expressions are read from the parent row. A parent row
has precedence to a expression row, so if a parent row and a resultrow contain
a column with the same name, the value is read from the parent row.

ResultRows are not writeable, you cannot change a resultrow directly only
by setting a new parent row or by modifying the parent row (if the row is
a tsPhysicalRow).


A tsResultSet is used to store rows for a specific query. tsResult row does
not read the complete query into the memory, how many rows are read at once
is defined using setFetchSize() of ResultSet or Statement.

tsResultSet does currently only support FORWARD_ONLY resultsets.

ResourceManagement
=========================

The behaviour on close ()
-------------------------

tinySQL does automaticly release resources referenced by the sql-objects.
If a resultset is closed, all assigned tableviews are closed and the stored
rows freed. The closing on a statement closes all resultsets opened by this
statement. Closing a connection does also close all statements and the
tinySQL-object assigned to this connection. The tinySQL object makes sure,
that no physical table used by this object remains open.

Table-structure changes
-------------------------
For table structure changes to succeed, all open table-views have to be
closed. Every table structure change needs exclusive write-access to the 
table that will be changed.

Multiple-Connections on the same URL
------------------------------------
tinySQL does not handle connections to the same URL specially. It is up to
the driver implementation to coordinate concurrent access.


Natural order of tables.
------------------------
TinySQL does not enforce a specific order to the tables. It is up to the
driver to specify a natural order of the tables.
