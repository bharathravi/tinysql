/* Generated By:JavaCC: Do not edit this line. TinySQLParserConstants.java */
package ORG.as220.tinySQL.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TinySQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int LETTER = 3;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 4;
  /** RegularExpression Id. */
  int DIGIT = 5;
  /** RegularExpression Id. */
  int HEX_DIGIT = 6;
  /** RegularExpression Id. */
  int BINARY_DIGIT = 7;
  /** RegularExpression Id. */
  int UNSIGNED_INTEGER = 8;
  /** RegularExpression Id. */
  int EXPONENT_PART = 9;
  /** RegularExpression Id. */
  int NEWLINE = 10;
  /** RegularExpression Id. */
  int NONQUOTE_CHARACTER = 11;
  /** RegularExpression Id. */
  int COMMA = 12;
  /** RegularExpression Id. */
  int PERIOD = 13;
  /** RegularExpression Id. */
  int COLON = 14;
  /** RegularExpression Id. */
  int QUOTE = 15;
  /** RegularExpression Id. */
  int DQUOTE = 16;
  /** RegularExpression Id. */
  int SEMICOLON = 17;
  /** RegularExpression Id. */
  int L_PAREN = 18;
  /** RegularExpression Id. */
  int R_PAREN = 19;
  /** RegularExpression Id. */
  int QUEST = 20;
  /** RegularExpression Id. */
  int ADD = 21;
  /** RegularExpression Id. */
  int AND = 22;
  /** RegularExpression Id. */
  int ALL = 23;
  /** RegularExpression Id. */
  int ALTER = 24;
  /** RegularExpression Id. */
  int AS = 25;
  /** RegularExpression Id. */
  int ASC = 26;
  /** RegularExpression Id. */
  int BY = 27;
  /** RegularExpression Id. */
  int COLUMN = 28;
  /** RegularExpression Id. */
  int COMPACT = 29;
  /** RegularExpression Id. */
  int CREATE = 30;
  /** RegularExpression Id. */
  int DELETE = 31;
  /** RegularExpression Id. */
  int DESC = 32;
  /** RegularExpression Id. */
  int DISTINCT = 33;
  /** RegularExpression Id. */
  int DROP = 34;
  /** RegularExpression Id. */
  int EXIST = 35;
  /** RegularExpression Id. */
  int EXISTS = 36;
  /** RegularExpression Id. */
  int FROM = 37;
  /** RegularExpression Id. */
  int GROUP = 38;
  /** RegularExpression Id. */
  int IF = 39;
  /** RegularExpression Id. */
  int INSERT = 40;
  /** RegularExpression Id. */
  int INTO = 41;
  /** RegularExpression Id. */
  int LIMIT = 42;
  /** RegularExpression Id. */
  int NOT = 43;
  /** RegularExpression Id. */
  int NULL = 44;
  /** RegularExpression Id. */
  int OR = 45;
  /** RegularExpression Id. */
  int ORDER = 46;
  /** RegularExpression Id. */
  int PRIMARY_KEY = 47;
  /** RegularExpression Id. */
  int RENAME = 48;
  /** RegularExpression Id. */
  int SELECT = 49;
  /** RegularExpression Id. */
  int SET = 50;
  /** RegularExpression Id. */
  int TABLE = 51;
  /** RegularExpression Id. */
  int TO = 52;
  /** RegularExpression Id. */
  int UPDATE = 53;
  /** RegularExpression Id. */
  int VALUES = 54;
  /** RegularExpression Id. */
  int WHERE = 55;
  /** RegularExpression Id. */
  int CHAR = 56;
  /** RegularExpression Id. */
  int INT = 57;
  /** RegularExpression Id. */
  int NUMERIC = 58;
  /** RegularExpression Id. */
  int DATE = 59;
  /** RegularExpression Id. */
  int BOOLEAN = 60;
  /** RegularExpression Id. */
  int FLOAT = 61;
  /** RegularExpression Id. */
  int BIT = 62;
  /** RegularExpression Id. */
  int DECIMAL = 63;
  /** RegularExpression Id. */
  int DOUBLE = 64;
  /** RegularExpression Id. */
  int REAL = 65;
  /** RegularExpression Id. */
  int BIGINT = 66;
  /** RegularExpression Id. */
  int SMALLINT = 67;
  /** RegularExpression Id. */
  int TINYINT = 68;
  /** RegularExpression Id. */
  int VARCHAR = 69;
  /** RegularExpression Id. */
  int LONGVARCHAR = 70;
  /** RegularExpression Id. */
  int BINARY = 71;
  /** RegularExpression Id. */
  int VARBINARY = 72;
  /** RegularExpression Id. */
  int LONGVARBINARY = 73;
  /** RegularExpression Id. */
  int TIME = 74;
  /** RegularExpression Id. */
  int TIMESTAMP = 75;
  /** RegularExpression Id. */
  int BLOB = 76;
  /** RegularExpression Id. */
  int CLOB = 77;
  /** RegularExpression Id. */
  int PLUS = 78;
  /** RegularExpression Id. */
  int MINUS = 79;
  /** RegularExpression Id. */
  int MULT = 80;
  /** RegularExpression Id. */
  int DIV = 81;
  /** RegularExpression Id. */
  int ASSIGN = 82;
  /** RegularExpression Id. */
  int EQUALS = 83;
  /** RegularExpression Id. */
  int NOT_EQUALS = 84;
  /** RegularExpression Id. */
  int LT_EQUALS = 85;
  /** RegularExpression Id. */
  int GT_EQUALS = 86;
  /** RegularExpression Id. */
  int LT = 87;
  /** RegularExpression Id. */
  int GT = 88;
  /** RegularExpression Id. */
  int BETWEEN = 89;
  /** RegularExpression Id. */
  int NBETWEEN = 90;
  /** RegularExpression Id. */
  int LIKE = 91;
  /** RegularExpression Id. */
  int IDENTIFIER = 92;
  /** RegularExpression Id. */
  int QUOTED_IDENTIFIER = 93;
  /** RegularExpression Id. */
  int STRING_LITERAL = 94;
  /** RegularExpression Id. */
  int JOKER_IDENTIFIER = 95;
  /** RegularExpression Id. */
  int QUOTED_JOKER_IDENTIFIER = 96;
  /** RegularExpression Id. */
  int UNSIGNED_NUMERIC_LITERAL = 97;
  /** RegularExpression Id. */
  int EXACT_NUMERIC_LITERAL = 98;
  /** RegularExpression Id. */
  int APPROXIMATE_NUMERIC_LITERAL = 99;
  /** RegularExpression Id. */
  int EXPONENT = 100;
  /** RegularExpression Id. */
  int MANTISSA = 101;
  /** RegularExpression Id. */
  int SIGNED_INTEGER = 102;
  /** RegularExpression Id. */
  int SIGN = 103;
  /** RegularExpression Id. */
  int SIGNED_NUMERIC_LITERAL = 104;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<token of kind 2>",
    "<LETTER>",
    "<NON_ZERO_DIGIT>",
    "<DIGIT>",
    "<HEX_DIGIT>",
    "<BINARY_DIGIT>",
    "<UNSIGNED_INTEGER>",
    "<EXPONENT_PART>",
    "<NEWLINE>",
    "<NONQUOTE_CHARACTER>",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"?\"",
    "\"add\"",
    "\"and\"",
    "\"all\"",
    "\"alter\"",
    "\"as\"",
    "\"asc\"",
    "\"by\"",
    "\"column\"",
    "\"compact\"",
    "\"create\"",
    "\"delete\"",
    "\"desc\"",
    "\"distinct\"",
    "\"drop\"",
    "\"exist\"",
    "\"exists\"",
    "\"from\"",
    "\"group\"",
    "\"if\"",
    "\"insert\"",
    "\"into\"",
    "\"limit\"",
    "\"not\"",
    "\"null\"",
    "\"or\"",
    "\"order\"",
    "\"primary key\"",
    "\"rename\"",
    "\"select\"",
    "\"set\"",
    "\"table\"",
    "\"to\"",
    "\"update\"",
    "\"values\"",
    "\"where\"",
    "<CHAR>",
    "<INT>",
    "<NUMERIC>",
    "\"date\"",
    "\"boolean\"",
    "\"float\"",
    "\"bit\"",
    "\"decimal\"",
    "\"double\"",
    "\"real\"",
    "<BIGINT>",
    "<SMALLINT>",
    "<TINYINT>",
    "\"varchar\"",
    "\"longvarchar\"",
    "\"binary\"",
    "\"varbinary\"",
    "\"longvarbinary\"",
    "\"time\"",
    "\"timestamp\"",
    "\"blob\"",
    "\"clob\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"==\"",
    "\"<>\"",
    "\"<=\"",
    "\">=\"",
    "\"<\"",
    "\">\"",
    "\"between\"",
    "<NBETWEEN>",
    "\"like\"",
    "<IDENTIFIER>",
    "<QUOTED_IDENTIFIER>",
    "<STRING_LITERAL>",
    "<JOKER_IDENTIFIER>",
    "<QUOTED_JOKER_IDENTIFIER>",
    "<UNSIGNED_NUMERIC_LITERAL>",
    "<EXACT_NUMERIC_LITERAL>",
    "<APPROXIMATE_NUMERIC_LITERAL>",
    "<EXPONENT>",
    "<MANTISSA>",
    "<SIGNED_INTEGER>",
    "<SIGN>",
    "<SIGNED_NUMERIC_LITERAL>",
  };

}
